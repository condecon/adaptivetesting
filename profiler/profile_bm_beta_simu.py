"""
Profiler example for using Maximum Likelihood Estimation
for the ability estimation.

It can be used to find out where slow operations are occurring.
"""
from adaptivetesting.implementations import TestAssembler
from adaptivetesting.math.estimators import BayesModal, CustomPrior
from adaptivetesting.math.item_selection import urrys_rule
from adaptivetesting.models import ItemPool
from adaptivetesting.simulation import Simulation, ResultOutputFormat, StoppingCriterion
from scipy.stats import beta

items = [{ "word": "Alternative", "Difficulty": 2.1851, "EstErrorIntercept": 0.2227, "Q25Intercept": -2.6153, "Q975Intercept": -1.7385 }, { "word": "Anzahl", "Difficulty": 0.2897, "EstErrorIntercept": 0.2209, "Q25Intercept": -0.7178, "Q975Intercept": 0.1456 }, { "word": "Ausnahme", "Difficulty": -1.265, "EstErrorIntercept": 0.2246, "Q25Intercept": 0.8292, "Q975Intercept": 1.7073 }, { "word": "Bedingung", "Difficulty": 1.2132, "EstErrorIntercept": 0.221, "Q25Intercept": -1.6409, "Q975Intercept": -0.7836 }, { "word": "Betrieb", "Difficulty": 1.486, "EstErrorIntercept": 0.2212, "Q25Intercept": -1.9158, "Q975Intercept": -1.0513 }, { "word": "Chef", "Difficulty": -2.3189, "EstErrorIntercept": 0.2335, "Q25Intercept": 1.8701, "Q975Intercept": 2.7763 }, { "word": "Drama", "Difficulty": 1.2723, "EstErrorIntercept": 0.2203, "Q25Intercept": -1.7026, "Q975Intercept": -0.8445 }, { "word": "Elch", "Difficulty": -2.2412, "EstErrorIntercept": 0.2324, "Q25Intercept": 1.7922, "Q975Intercept": 2.7007 }, { "word": "Filmstar", "Difficulty": 2.0923, "EstErrorIntercept": 0.223, "Q25Intercept": -2.5242, "Q975Intercept": -1.6533 }, { "word": "Firma", "Difficulty": 0.6305, "EstErrorIntercept": 0.2195, "Q25Intercept": -1.0572, "Q975Intercept": -0.2017 }, { "word": "Formel", "Difficulty": 2.6673, "EstErrorIntercept": 0.226, "Q25Intercept": -3.1084, "Q975Intercept": -2.2267 }, { "word": "Frisur", "Difficulty": -3.1261, "EstErrorIntercept": 0.2471, "Q25Intercept": 2.6488, "Q975Intercept": 3.6193 }, { "word": "Glastür", "Difficulty": -1.121, "EstErrorIntercept": 0.2246, "Q25Intercept": 0.6899, "Q975Intercept": 1.5688 }, { "word": "Job", "Difficulty": 0.474, "EstErrorIntercept": 0.2206, "Q25Intercept": -0.9028, "Q975Intercept": -0.0365 }, { "word": "Kapitän", "Difficulty": -2.7397, "EstErrorIntercept": 0.2387, "Q25Intercept": 2.2709, "Q975Intercept": 3.2108 }, { "word": "Komma", "Difficulty": 1.1468, "EstErrorIntercept": 0.2208, "Q25Intercept": -1.5724, "Q975Intercept": -0.7143 }, { "word": "Kontrolle", "Difficulty": -0.9618, "EstErrorIntercept": 0.2241, "Q25Intercept": 0.5278, "Q975Intercept": 1.4055 }, { "word": "Kummer", "Difficulty": 1.1303, "EstErrorIntercept": 0.2212, "Q25Intercept": -1.5597, "Q975Intercept": -0.6967 }, { "word": "Kunde", "Difficulty": 0.2754, "EstErrorIntercept": 0.2195, "Q25Intercept": -0.7016, "Q975Intercept": 0.1627 }, { "word": "Magnet", "Difficulty": -2.9608, "EstErrorIntercept": 0.2435, "Q25Intercept": 2.4921, "Q975Intercept": 3.4468 }, { "word": "Markt", "Difficulty": -2.7397, "EstErrorIntercept": 0.2394, "Q25Intercept": 2.277, "Q975Intercept": 3.215 }, { "word": "Million", "Difficulty": -1.2513, "EstErrorIntercept": 0.2243, "Q25Intercept": 0.8167, "Q975Intercept": 1.6941 }, { "word": "Mode", "Difficulty": 0.7518, "EstErrorIntercept": 0.2204, "Q25Intercept": -1.1767, "Q975Intercept": -0.321 }, { "word": "Nahrung", "Difficulty": -0.5432, "EstErrorIntercept": 0.2211, "Q25Intercept": 0.1123, "Q975Intercept": 0.9796 }, { "word": "Ozean", "Difficulty": -1.0476, "EstErrorIntercept": 0.2228, "Q25Intercept": 0.6087, "Q975Intercept": 1.4857 }, { "word": "Panik", "Difficulty": 1.0683, "EstErrorIntercept": 0.2206, "Q25Intercept": -1.4969, "Q975Intercept": -0.6347 }, { "word": "Paris", "Difficulty": -0.3108, "EstErrorIntercept": 0.2214, "Q25Intercept": -0.1163, "Q975Intercept": 0.7454 }, { "word": "Portion", "Difficulty": -1.7985, "EstErrorIntercept": 0.2282, "Q25Intercept": 1.3558, "Q975Intercept": 2.2477 }, { "word": "Produkt", "Difficulty": 2.0916, "EstErrorIntercept": 0.2234, "Q25Intercept": -2.5212, "Q975Intercept": -1.6511 }, { "word": "Programm", "Difficulty": -0.7068, "EstErrorIntercept": 0.2218, "Q25Intercept": 0.2735, "Q975Intercept": 1.135 }, { "word": "Scherz", "Difficulty": -1.375, "EstErrorIntercept": 0.2256, "Q25Intercept": 0.9357, "Q975Intercept": 1.8181 }, { "word": "Spende", "Difficulty": 0.5698, "EstErrorIntercept": 0.2202, "Q25Intercept": -0.9985, "Q975Intercept": -0.1338 }, { "word": "System", "Difficulty": 2.2966, "EstErrorIntercept": 0.2236, "Q25Intercept": -2.7306, "Q975Intercept": -1.8544 }, { "word": "Tafel", "Difficulty": -3.1459, "EstErrorIntercept": 0.247, "Q25Intercept": 2.6716, "Q975Intercept": 3.6349 }, { "word": "Temperatur", "Difficulty": -2.0568, "EstErrorIntercept": 0.2301, "Q25Intercept": 1.6077, "Q975Intercept": 2.509 }, { "word": "Tonne", "Difficulty": -3.3502, "EstErrorIntercept": 0.2534, "Q25Intercept": 2.864, "Q975Intercept": 3.8537 }, { "word": "Tourist", "Difficulty": 1.5728, "EstErrorIntercept": 0.2205, "Q25Intercept": -2.0065, "Q975Intercept": -1.1434 }, { "word": "Verkehr", "Difficulty": -2.0469, "EstErrorIntercept": 0.2307, "Q25Intercept": 1.5929, "Q975Intercept": 2.4996 }, { "word": "Versager", "Difficulty": 2.9428, "EstErrorIntercept": 0.2279, "Q25Intercept": -3.3866, "Q975Intercept": -2.4986 }, { "word": "Virus", "Difficulty": -1.3231, "EstErrorIntercept": 0.2256, "Q25Intercept": 0.8914, "Q975Intercept": 1.7678 }, { "word": "Vitamin", "Difficulty": -1.7132, "EstErrorIntercept": 0.2278, "Q25Intercept": 1.2714, "Q975Intercept": 2.1645 }, { "word": "Vorwand", "Difficulty": 3.508, "EstErrorIntercept": 0.2332, "Q25Intercept": -3.9574, "Q975Intercept": -3.0525 }, { "word": "Zange", "Difficulty": -3.3502, "EstErrorIntercept": 0.2512, "Q25Intercept": 2.8652, "Q975Intercept": 3.8497 }, { "word": "allergisch", "Difficulty": -0.6007, "EstErrorIntercept": 0.2213, "Q25Intercept": 0.1693, "Q975Intercept": 1.0353 }, { "word": "anbieten", "Difficulty": -0.2241, "EstErrorIntercept": 0.2216, "Q25Intercept": -0.2079, "Q975Intercept": 0.6574 }, { "word": "auspressen", "Difficulty": -1.252, "EstErrorIntercept": 0.225, "Q25Intercept": 0.8185, "Q975Intercept": 1.6941 }, { "word": "besorgt", "Difficulty": 0.4586, "EstErrorIntercept": 0.221, "Q25Intercept": -0.8854, "Q975Intercept": -0.0238 }, { "word": "einsam", "Difficulty": -0.5313, "EstErrorIntercept": 0.2216, "Q25Intercept": 0.1045, "Q975Intercept": 0.9659 }, { "word": "exakt", "Difficulty": 1.6675, "EstErrorIntercept": 0.2216, "Q25Intercept": -2.0961, "Q975Intercept": -1.232 }, { "word": "feige", "Difficulty": 0.208, "EstErrorIntercept": 0.2201, "Q25Intercept": -0.6273, "Q975Intercept": 0.2221 }, { "word": "fit", "Difficulty": -1.8087, "EstErrorIntercept": 0.228, "Q25Intercept": 1.3678, "Q975Intercept": 2.2506 }, { "word": "freiwillig", "Difficulty": -1.3896, "EstErrorIntercept": 0.2243, "Q25Intercept": 0.9582, "Q975Intercept": 1.8305 }, { "word": "fremd", "Difficulty": -2.2851, "EstErrorIntercept": 0.2333, "Q25Intercept": 1.8307, "Q975Intercept": 2.7454 }, { "word": "geheimnisvoll", "Difficulty": 0.4385, "EstErrorIntercept": 0.2217, "Q25Intercept": -0.8711, "Q975Intercept": -0.0035 }, { "word": "gelingen", "Difficulty": -0.0748, "EstErrorIntercept": 0.2203, "Q25Intercept": -0.3527, "Q975Intercept": 0.5075 }, { "word": "heiraten", "Difficulty": -2.9614, "EstErrorIntercept": 0.2427, "Q25Intercept": 2.4902, "Q975Intercept": 3.4396 }, { "word": "herstellen", "Difficulty": -1.288, "EstErrorIntercept": 0.2251, "Q25Intercept": 0.8499, "Q975Intercept": 1.7305 }, { "word": "hygienisch", "Difficulty": 1.9457, "EstErrorIntercept": 0.2222, "Q25Intercept": -2.3743, "Q975Intercept": -1.5093 }, { "word": "höchstpersönlich", "Difficulty": 3.7609, "EstErrorIntercept": 0.2357, "Q25Intercept": -4.2237, "Q975Intercept": -3.2973 }, { "word": "kündigen", "Difficulty": 1.3988, "EstErrorIntercept": 0.2214, "Q25Intercept": -1.8301, "Q975Intercept": -0.9646 }, { "word": "mager", "Difficulty": 2.1927, "EstErrorIntercept": 0.2231, "Q25Intercept": -2.6241, "Q975Intercept": -1.7565 }, { "word": "minimal", "Difficulty": 2.2893, "EstErrorIntercept": 0.224, "Q25Intercept": -2.7217, "Q975Intercept": -1.8497 }, { "word": "mutlos", "Difficulty": 2.2309, "EstErrorIntercept": 0.2246, "Q25Intercept": -2.6697, "Q975Intercept": -1.7939 }, { "word": "nachweisen", "Difficulty": 2.4313, "EstErrorIntercept": 0.2243, "Q25Intercept": -2.8693, "Q975Intercept": -1.9851 }, { "word": "nutzen", "Difficulty": -0.8926, "EstErrorIntercept": 0.2224, "Q25Intercept": 0.4599, "Q975Intercept": 1.3265 }, { "word": "optimal", "Difficulty": 1.8916, "EstErrorIntercept": 0.2216, "Q25Intercept": -2.3223, "Q975Intercept": -1.4593 }, { "word": "redselig", "Difficulty": 4.4585, "EstErrorIntercept": 0.2473, "Q25Intercept": -4.9431, "Q975Intercept": -3.9697 }, { "word": "rosten", "Difficulty": -0.2076, "EstErrorIntercept": 0.2197, "Q25Intercept": -0.222, "Q975Intercept": 0.6383 }, { "word": "rudern", "Difficulty": -0.8728, "EstErrorIntercept": 0.2235, "Q25Intercept": 0.4367, "Q975Intercept": 1.3097 }, { "word": "saftig", "Difficulty": -2.2102, "EstErrorIntercept": 0.2333, "Q25Intercept": 1.7569, "Q975Intercept": 2.6711 }, { "word": "speziell", "Difficulty": 0.3662, "EstErrorIntercept": 0.2215, "Q25Intercept": -0.7972, "Q975Intercept": 0.0709 }, { "word": "spontan", "Difficulty": 0.8485, "EstErrorIntercept": 0.2209, "Q25Intercept": -1.2733, "Q975Intercept": -0.4131 }, { "word": "sprachlos", "Difficulty": 0.9405, "EstErrorIntercept": 0.2202, "Q25Intercept": -1.3652, "Q975Intercept": -0.5112 }, { "word": "spurlos", "Difficulty": 0.8796, "EstErrorIntercept": 0.22, "Q25Intercept": -1.309, "Q975Intercept": -0.4525 }, { "word": "stehlen", "Difficulty": -1.0274, "EstErrorIntercept": 0.224, "Q25Intercept": 0.594, "Q975Intercept": 1.4688 }, { "word": "studieren", "Difficulty": 0.4329, "EstErrorIntercept": 0.22, "Q25Intercept": -0.8603, "Q975Intercept": 0.0005 }, { "word": "stürzen", "Difficulty": -1.9994, "EstErrorIntercept": 0.2296, "Q25Intercept": 1.5601, "Q975Intercept": 2.4516 }, { "word": "testen", "Difficulty": -2.5433, "EstErrorIntercept": 0.2369, "Q25Intercept": 2.0827, "Q975Intercept": 3.013 }, { "word": "tippen", "Difficulty": -2.5175, "EstErrorIntercept": 0.2353, "Q25Intercept": 2.0586, "Q975Intercept": 2.9794 }, { "word": "treu", "Difficulty": 1.1573, "EstErrorIntercept": 0.2208, "Q25Intercept": -1.5878, "Q975Intercept": -0.727 }, { "word": "unfair", "Difficulty": -2.5308, "EstErrorIntercept": 0.2366, "Q25Intercept": 2.0687, "Q975Intercept": 3.0022 }, { "word": "verlegen", "Difficulty": 1.2931, "EstErrorIntercept": 0.2208, "Q25Intercept": -1.7222, "Q975Intercept": -0.8641 }, { "word": "verweigern", "Difficulty": 1.995, "EstErrorIntercept": 0.2221, "Q25Intercept": -2.426, "Q975Intercept": -1.5581 }, { "word": "verwesen", "Difficulty": 3.3121, "EstErrorIntercept": 0.2316, "Q25Intercept": -3.7662, "Q975Intercept": -2.8558 }, { "word": "vorstellen", "Difficulty": -1.442, "EstErrorIntercept": 0.2257, "Q25Intercept": 1.0061, "Q975Intercept": 1.8822 }, { "word": "weiblich", "Difficulty": 0.0207, "EstErrorIntercept": 0.2203, "Q25Intercept": -0.4495, "Q975Intercept": 0.4131 }, { "word": "widmen", "Difficulty": 4.0979, "EstErrorIntercept": 0.2419, "Q25Intercept": -4.574, "Q975Intercept": -3.6216 }, { "word": "wirken", "Difficulty": 0.7618, "EstErrorIntercept": 0.2197, "Q25Intercept": -1.1865, "Q975Intercept": -0.3312 }, { "word": "zahm", "Difficulty": 0.1462, "EstErrorIntercept": 0.2204, "Q25Intercept": -0.5746, "Q975Intercept": 0.2882 }]

difficulties = [item["Difficulty"] for item in items]
item_pool = ItemPool.load_from_list(
    b=difficulties
)

# theta samples
from scipy.stats import norm
theta = 0


test = TestAssembler(
        item_pool=item_pool,
        simulation_id="test",
        participant_id="0",
        ability_estimator=BayesModal,
        estimator_args={
            "prior": CustomPrior(beta, 0.6, 0.9)
        },
        item_selector=urrys_rule,
        true_ability_level=theta,
        simulation=True
    )

sim = Simulation(
    test,
    ResultOutputFormat.CSV
)
sim.simulate(
    StoppingCriterion.SE,
    value=0.4
)

# sim.save_test_results() is not called
# therefore, no CSV files will be created
